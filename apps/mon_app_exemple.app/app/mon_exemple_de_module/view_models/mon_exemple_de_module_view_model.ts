import MonExempleDeModule from '#mon_exemple_de_module/models/mon_exemple_de_module'
import { DateTime } from 'luxon'

/**
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 * ðŸ“¦ ViewModel : Quâ€™est-ce que câ€™est ?
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 *
 * Un ViewModel est une **couche de transformation** entre le modÃ¨le mÃ©tier
 * (ex : base de donnÃ©es) et le monde extÃ©rieur (API, UI, client).
 *
 * ðŸ‘‰ Il permet de :
 *   - Masquer des champs sensibles ou inutiles
 *   - Adapter les noms, les formats ou les structures
 *   - Garantir une sortie **stable, contrÃ´lÃ©e et claire**
 *   - SÃ©parer les prÃ©occupations entre le backend et la prÃ©sentation
 *
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 * ðŸŽ¯ Exemple concret :
 *
 * Imaginons que "models/mon_exemple_de_module" soit un modÃ¨le `User` contenant les champs suivants :
 *   - id
 *   - email
 *   - password_hash
 *   - last_login
 *   - created_at
 *
 * En exposant lâ€™utilisateur au frontend, on ne veut **surtout pas** renvoyer :
 *   - `password_hash` (sensibilitÃ©)
 *   - `last_login` (pas pertinent, selon le contexte)
 *
 * Le ViewModel nous permet alors de faire :
 *
 *    return {
 *      id: user.id,
 *      email: user.email,
 *      registeredAt: user.created_at
 *    }
 *
 * RÃ©sultat : une sortie **propre, safe, adaptÃ©e Ã  lâ€™interface**.
 *
 * â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
 * ðŸ’¡ Astuce :
 * On peut aussi utiliser les ViewModel pour ajouter des **donnÃ©es calculÃ©es**,
 * comme une `isActive`, `fullName` (la concatÃ©nation de `firstName` et `lastName`), ou autre champ UI-friendly.
 */

export type MonExempleDeModuleViewModelSerialized = ReturnType<
  MonExempleDeModuleViewModel['serialize']
>
export type AllMonExempleDeModuleViewModelSerialized = ReturnType<
  AllMonExempleDeModuleViewModel['serialize']
>

/**
 * @class MonExempleDeModuleViewModel
 * @description Transforme un objet mÃ©tier en un format exploitable cÃ´tÃ© frontend.
 */
export class MonExempleDeModuleViewModel {
  constructor(private entity: MonExempleDeModule) {}

  /**
   * @static fromDomain
   * @description CrÃ©e une instance Ã  partir d'un modÃ¨le de domaine.
   */
  static fromDomain(entity: MonExempleDeModule): MonExempleDeModuleViewModel {
    return new this(entity)
  }

  /**
   * @method serialize
   * @description SÃ©rialise lâ€™objet pour lâ€™interface utilisateur (API).
   */
  serialize(): {
    id: number
    name: string
    createdAt: DateTime
    updatedAt: DateTime
  } {
    return {
      id: this.entity.id,
      name: this.entity.name,
      createdAt: this.entity.createdAt,
      updatedAt: this.entity.updatedAt,
    }
  }
}

/**
 * @class AllMonExempleDeModuleViewModel
 * @description Transforme une liste dâ€™objets mÃ©tier pour l'UI.
 */
export class AllMonExempleDeModuleViewModel {
  constructor(private entities: MonExempleDeModuleViewModel[]) {}

  /**
   * @static fromDomain
   * @description Construit la vue liste Ã  partir d'une collection mÃ©tier.
   */
  static fromDomain(entities: MonExempleDeModule[]): AllMonExempleDeModuleViewModel {
    return new this(entities.map((e) => new MonExempleDeModuleViewModel(e)))
  }

  /**
   * @method serialize
   * @returns Liste des entitÃ©s formatÃ©es pour lâ€™UI.
   */
  serialize(): ReturnType<MonExempleDeModuleViewModel['serialize']>[] {
    return this.entities.map((e) => e.serialize())
  }
}
